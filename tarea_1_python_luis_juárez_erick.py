# -*- coding: utf-8 -*-
"""Tarea 1 python Luis Juárez Erick

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16bcowCdZERgD0vSStNs8J8AQ2yA9ugAb
"""
#Grafica 1: Curva Asteroide y su Involuta
from sympy import symbols, cos, sin, pi, plot_parametric #Se importan funciones para sympy
t = symbols('t') #Se define el parámetro t
#Curva Asteroide
x_asteroide = cos(t)**3 #Se define la componente x de la curva asteroide
y_asteroide = sin(t)**3 #Se define la componente y de la curva asteroide
# Involuta de la Curva Asteroide
x_asteroide_involuta = (3 * cos(t) - cos(3 * t)) / 8 #Se define la componente x de la involuta de la curva asteroide
y_asteroide_involuta = (3 * sin(t) + sin(3 * t)) / 8 #Se define la componente y de la involuta de la curva asteroide
# Grafica la curva asteroide y su involuta y se imprime el titulo de la gráfica y su leyenda
p = plot_parametric((x_asteroide, y_asteroide, (t, 0, 2 * pi)), show=False, line_color='blue', label='Curva Asteroide') #Grafica la curva asteroide
p.extend(plot_parametric((x_asteroide_involuta, y_asteroide_involuta, (t, 0, 2 * pi)), show=False, line_color='red', line_style='--', label='Involuta')) #Añade la involuta a la gráfica
p.title = "Curva Asteroide y su Involuta" #Imprime el titulo de la gráfica
p.legend = True #Muestra la leyenda de la grafica
p.show() #Muestra la grafica final

#Grafica 2: Circulo y su Involuta
from sympy import symbols, cos, sin, pi, plot_parametric #Se importan funciones para sympy
t = symbols('t') #Se define el parámetro t
r = 2 #Se define el radio del circulo
#Circulo
x_circulo = r * cos(t) #Se define la componente x del circulo
y_circulo = r * sin(t) #Se define la componente y del circulo
# Involuta del Circulo
x_circulo_involuta = r * (cos(t) + t * sin(t)) #Se define la componente x de la involuta del circulo
y_circulo_involuta = r * (sin(t) - t * cos(t)) #Se define la componente y de la involuta del circulo
# Grafica el círculo y su involuta y se imprime el titulo de la gráfica y la leyenda
p = plot_parametric((x_circulo, y_circulo, (t, 0, 2 * pi)), show=False, line_color='green', label='Circulo') #Grafica el circulo
p.extend(plot_parametric((x_circulo_involuta, y_circulo_involuta, (t, 0, 2 * pi)), show=False, line_color='purple', line_style='--', label='Involuta')) #Añade la involuta a la gráfica
p.title = "Circulo y su Involuta" #Imprime el titulo de la gráfica
p.legend = True #Muestra la leyenda de la grafica
p.show() #Muestra la grafica final

#Grafica 3: Catenaria y su Involuta
from sympy import symbols, cosh, sinh, plot_parametric #Se importan funciones para sympy
t = symbols('t')#Se dedine el parámetro t
# Catenaria
x_catenaria = t #Se define la componente x de la catenaria
y_catenaria = cosh(t) #Se define la componente y de la catenaria
# Involuta de la Catenaria
x_catenaria_involuta = t - sinh(t) / cosh(t) #Se define la componente x de la involuta de la catenaria
y_catenaria_involuta = 1 / cosh(t) #Se define la componente y de la involuta de la catenaria
# Grafica la catenaria y su involuta e imprime el titulo d ela grafica y su leyenda
p = plot_parametric((x_catenaria, y_catenaria, (t, -2, 2)), show=False, line_color='red', label='Catenaria') #Grafica la catenaria
p.extend(plot_parametric((x_catenaria_involuta, y_catenaria_involuta, (t, -2, 2)), show=False, line_color='cyan', line_style='--', label='Involuta')) #Añade la involuta a la gráfica
p.title = "Catenaria y su Involuta" #Imprime el titulo de la gráfica
p.legend = True #Muestra la leyenda de la grafica
p.show() #Muestra la grafica final

#Grafica 4: Nefroide y su Involuta
from sympy import symbols, cos, sin, pi, plot_parametric #Se importan funciones para sympy
t = symbols('t') #Se define el parametro t
#Nefroide
x_nefroide = (3 * cos(t) - cos(3 * t)) / 2 #Se define la componente x de la nefroide
y_nefroide = (3 * sin(t) - sin(3 * t)) / 2 #Se define la componente y de la nefroide
# Involuta de la Nefroide
x_nefroide_involuta = 4 * cos(t)**3 #Se define la componente x de la involuta de la nefroide
y_nefroide_involuta = 3 * sin(t) + sin(3 * t) #Se define la componente y de la involuta de la nefroide
# Grafica la nefroide y su involuta e imprime el titulo de la gráfica y su leyenda
p = plot_parametric((x_nefroide, y_nefroide, (t, 0, 2 * pi)), show=False, line_color='orange', label='Nefroide') #Grafica la nefroide
p.extend(plot_parametric((x_nefroide_involuta, y_nefroide_involuta, (t, 0, 2 * pi)), show=False, line_color='pink', line_style='--', label='Involuta')) #Añade la involuta a la gráfica
p.title = "Nefroide y su Involuta" #Imprime el titulo de la gráfica
p.legend = True #Muestra la leyenda de la grafica
p.show() #Muestra la grafica final

#Grafica 5: Cardioide y su Involuta
from sympy import symbols, cos, sin, pi, plot_parametric #Se importan funciones para sympy
t = symbols('t') #Se define el parámetro t
a = 3 #Constante
# Cardioide
x_cardioid = (1 + cos(t)) * cos(t) #Se define la componente x de la cardioide
y_cardioid = (1 + cos(t)) * sin(t) #Se define la componente y de la cardioide
# Involuta de la Cardioide
x_cardioid_involute = 2 * a + 3 * a * cos(t) * (1 - cos(t)) #Se define la componente x de la involuta de la cardioide
y_cardioid_involute = 3 * a * sin(t) * (1 - cos(t)) #Se define la componente x de la involuta de la cardioide
# Grafica la cardioide y su involuta e imprime el titulo de la gráfica y su leyenda
p = plot_parametric((x_cardioid, y_cardioid, (t, 0, 2 * pi)), show=False, line_color='red', label='Cardioide') #Grafica la cardioide
p.extend(plot_parametric((x_cardioid_involute, y_cardioid_involute, (t, 0, 2 * pi)), show=False, line_color='yellow', line_style='--', label='Involuta')) #Añade la involuta a la gráfica
p.title = "Cardioide y su Involuta" #Imprime el titulo de la gráfica
p.legend = True #Muestra la leyenda de la grafica
p.show() #Muestra la grafica final